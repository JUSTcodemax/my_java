package abstractGraphics;


import java.io.*;
import java.util.Scanner;


abstract class AbstractGraphics {
	AbstractGraphics(){
	}
	/*
	double side;
	String inside;
	double radius;
	String inradius;
	double side1;
	double side2;
	double side3;
	double angle;
	double size;
	double[] aside;
	double Circumference;
	*/
	public abstract double input();
	public abstract double[] ainput();
	public abstract double getSize(double side);
	public abstract double getSize(double side1, double side2, double side3);
	public abstract double getCircumference(double side);
	public abstract double getCircumference(double side1, double side2, double side3);
	
	
	public static void main(String[] args){
		String in;
		double out;
		double[] aout;
		do {
		System.out.print("Calculate which graph(square/circle/triangle):");
		Scanner scanner = new Scanner(System.in);
		in = scanner.nextLine();
		if(in.equals("square")) {
			AbstractGraphics square = new Square();
			out = square.input();
			System.out.println("square:"+"\n"+"size="+square.getSize(out)
			+"\n"+"Circumference="+square.getCircumference(out));
		}
		if(in.equals("circle")) {
			AbstractGraphics circle = new Circle();
			out = circle.input();
			System.out.println("circle:"+"\n"+"size="+circle.getSize(out)
			+"\n"+"Circumference="+circle.getCircumference(out));
		}
		if(in.equals("triangle")) {
			AbstractGraphics triangle = new Triangle();
			aout = triangle.ainput();
			System.out.println("triangle:"+"\n"+"size="+triangle.getSize(aout[0], aout[1], aout[2])
			+"\n"+"Circumference="+triangle.getCircumference(aout[0], aout[1], aout[2]));
		}
		}while(in.length()!=0);
		System.out.println("------The program is end------");
	}
}

class Square extends AbstractGraphics{
	double side;
	String inside;
	double size;
	double Circumference;
	//------------
	double[] side1 = new double[4];
	public double input() {
		System.out.print("[Square]"+"input a side :");
		Scanner scanner = new Scanner(System.in);
		inside = scanner.nextLine();
		side = Double.parseDouble(inside);
		return side;
	}
	public double getSize(double side){
		size = side*side;
		return size;
	}
	public double getCircumference(double side){
		Circumference = 4*side;
		return Circumference;
	}
	//-----------------------------
	public double[] ainput(){
		return side1;
	}
	public double getSize(double side1, double side2, double side3){
		return size;
	}
	public double getCircumference(double side1, double side2, double side3){
		return Circumference;
	}
}

class Circle extends AbstractGraphics{
	double radius;
	String inradius;
	double size;
	double Circumference;
	//------------
	double[] side = new double[4];
	public double input() {
		System.out.print("[Circle]"+"input a radius :");
		Scanner scanner = new Scanner(System.in);
		inradius = scanner.nextLine();
		radius = Double.parseDouble(inradius);
		return radius;
	}
	public double getSize(double radius){
		size = Math.PI*radius*radius;
		return size;
	}
	public double getCircumference(double radius){
		Circumference = 2*Math.PI*radius;
		return Circumference;
	}
	//-------------------------------
	public double[] ainput(){
		return side;
	}
	public double getSize(double side1, double side2, double side3){
		return size;
	}
	public double getCircumference(double side1, double side2, double side3){
		return Circumference;
	}
}

class Triangle extends AbstractGraphics{
	double side1;
	double side2;
	double side3;
	double[] side = new double[4];  //Definition should be defined completely ah
	String inside;
	double angle;
	double size;
	double Circumference;
	//------------
	double radius;
	public double[] ainput(){
		for(int i=1; i<4; i=i+1) {
			System.out.print("[Triangle]"+"input side"+i+"(end up with pressing ENTER) :");
			Scanner scanner = new Scanner(System.in);
			inside = scanner.nextLine();
			switch(i) {
			case 1:
				side1 = Double.parseDouble(inside);
				side[0]=side1;
			case 2:
				side2 = Double.parseDouble(inside);
				side[1]=side2;
			case 3:
				side3 = Double.parseDouble(inside);
				side[2]=side3;
			}
		}
		return side;
	}
	public double getSize(double side1, double side2, double side3){
		angle = Math.toDegrees(Math.asin(Math.sqrt(1-Math.pow((side1*side1+side2*side2-side3*side3)/(2*side1*side2), 2))));
		size = (1.0/2.0)*side1*side2*Math.sqrt(1-Math.pow((side1*side1+side2*side2-side3*side3)/(2*side1*side2), 2));
		return size;
	}
	public double getCircumference(double side1, double side2, double side3){
		Circumference = side1+side2+side3;
		return Circumference;
	}
	//-------------------------------
	public double getSize(double radius){
		return size;
	}
	public double getCircumference(double radius){
		return Circumference;
	}
	public double input() {
		return radius;
	}
	
}

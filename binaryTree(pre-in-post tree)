import java.io.*;
import java.awt.*;
import javax.swing.*;
import java.util.*;
import java.util.List;


//Definition for a binary tree node.
 public class TreeNode {
	 int val;
     TreeNode left;
     TreeNode right;
     TreeNode() {}
     TreeNode(int val) { this.val = val; }
     TreeNode(int val, TreeNode left, TreeNode right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}
     public static void main(String[] args) {
    	 //[6, 2, 1, 4, 3, 5, 7, 9, 8]
    	 //[1, 2, 3, 4, 5, 6, 7, 8, 9]
    	 //[1, 3, 5, 4, 2, 8, 9, 7, 6]
    	 /*           6
    	  *      2         7
    	  *   1     4           9
    	  *       3   5       8
    	  */
    	 
    	 TreeNode ATree = new TreeNode(6);
    	 ATree.left = new TreeNode(2);
    	 ATree.right = new TreeNode(7);
    	 ATree.left.left = new TreeNode(1);
    	 ATree.left.right = new TreeNode(4);
    	 ATree.left.right.left = new TreeNode(3);
    	 ATree.left.right.right = new TreeNode(5);
    	 ATree.right.right = new TreeNode(9);
    	 ATree.right.right.left = new TreeNode(8);
    	 
    	 Solution.preorderTraversal(ATree);
    	 System.out.println(Solution.prelist);
    	 
    	 Solution.inorderTraversal(ATree);
    	 System.out.println(Solution.inlist);
    	 
    	 Solution.postorderTraversal(ATree);
    	 System.out.println(Solution.postlist);
     }
}
class Solution {
	//preorder
    static List<Integer> prelist = new ArrayList<>();
    public static List<Integer> preorderTraversal(TreeNode root) {
        prerenum(root);
        return prelist;
    }
    public static void prerenum(TreeNode root){
        if(root == null){
            return;
        }
        prelist.add(root.val);
        prerenum(root.left);
        prerenum(root.right);
    }
    //inorder
    static List<Integer> inlist = new ArrayList<>();
    public static List<Integer> inorderTraversal(TreeNode root) {
        inrenum(root);
        return inlist;
    }
    public static void inrenum(TreeNode root){
        if(root == null){
            return;
        }
        inrenum(root.left);
        inlist.add(root.val);
        inrenum(root.right);
    }
    //postorder
    static List<Integer> postlist = new ArrayList<>();
    public static List<Integer> postorderTraversal(TreeNode root) {
        postrenum(root);
        return postlist;
    }
    public static void postrenum(TreeNode root){
        if(root == null){
            return;
        }
        postrenum(root.left);
        postrenum(root.right);
        postlist.add(root.val);
    }
}
